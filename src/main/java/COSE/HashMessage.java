package COSE;

import com.upokecenter.cbor.CBORObject;
import com.upokecenter.cbor.CBORType;

public class HashMessage extends HashCommon {
	/**
	 * Create a HashMessage object. This object corresponds to the encrypt message
	 * format in COSE. The leading CBOR tag will be emitted. The message content
	 * will be emitted.
	 */
	public HashMessage() {
		this(true, true);
	}

	/**
	 * Create a HashMessage object. Emission of the leading tag is controlled by the
	 * parameter.
	 * 
	 * @param emitTag emit leading tag when message is serialized
	 */
	public HashMessage(boolean emitTag) {
		this(emitTag, true);
	}

	/**
	 * Create a HashMessage object for which the emission of the leading tag and
	 * content is controlled by the parameters.
	 * 
	 * @param emitTag     emit leading tag when message is serialized
	 * @param emitContent emit the content as part of the message
	 * @since COSE 0.9.1
	 */
	public HashMessage(boolean emitTag, boolean emitContent) {
		this.emitTag = emitTag;
		this.contextString = "Hash";
		this.emitContent = emitContent;
		this.messageTag = MessageTag.Hash;
	}

	/**
	 * Create a hash for the message if one does not exist.
	 * 
	 * @throws CoseException
	 */
	public void hash() throws CoseException {
		if (rgbContent == null)
			throw new CoseException("No Content Specified");
		if (rgbHash != null)
			return;

		if (rgbProtected == null) {
			if (objProtected.size() > 0)
				rgbProtected = objProtected.EncodeToBytes();
			else
				rgbProtected = new byte[0];
		}

		CBORObject obj = CBORObject.NewArray();
		obj.Add(contextString);
		obj.Add(rgbProtected);
		obj.Add(externalData);
		obj.Add(rgbContent);

		rgbHash = computeHash(rgbContent);

	}

	/**
	 * Internal function used in creating a HashMessage object from a byte string.
	 * 
	 * @param messageObject HashMessage encoded object.
	 * @throws CoseException Errors generated by the COSE module
	 */
	@Override
	protected void DecodeFromCBORObject(CBORObject messageObject) throws CoseException {
		if (messageObject.size() != 4)
			throw new CoseException("Invalid Hash structure");

		if (messageObject.get(0).getType() == CBORType.ByteString) {
			rgbProtected = messageObject.get(0).GetByteString();
			if (messageObject.get(0).GetByteString().length == 0)
				objProtected = CBORObject.NewMap();
			else {
				objProtected = CBORObject.DecodeFromBytes(rgbProtected);
				if (objProtected.size() == 0)
					rgbProtected = new byte[0];
			}
		} else
			throw new CoseException("Invalid Hash structure");

		if (messageObject.get(1).getType() == CBORType.Map) {
			objUnprotected = messageObject.get(1);
		} else
			throw new CoseException("Invalid Hash structure");

		if (messageObject.get(2).getType() == CBORType.ByteString)
			rgbContent = messageObject.get(2).GetByteString();
		else if (!messageObject.get(2).isNull())
			throw new CoseException("Invalid Hash structure");

		if (messageObject.get(3).getType() == CBORType.ByteString)
			rgbHash = messageObject.get(3).GetByteString();
		else
			throw new CoseException("Invalid Hash structure");
	}

	/**
	 * Internal function used to create a serialization of a HashMessage 
	 * 
	 * @return CBOR object which can be encoded.
	 * @throws CoseException Errors generated by the COSE module
	 */
	@Override
	protected CBORObject EncodeCBORObject() throws CoseException {
		if (rgbHash == null)
			throw new CoseException("hash function not called");
		if (rgbProtected == null)
			throw new CoseException("Internal Error");

		CBORObject obj = CBORObject.NewArray();
		obj.Add(rgbProtected);
		obj.Add(objUnprotected);
		if (emitContent)
			obj.Add(rgbContent);
		else
			obj.Add(null);
		obj.Add(rgbHash);

		return obj;
	}

}
